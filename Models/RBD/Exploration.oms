import java.text.SimpleDateFormat
import java.util.Date

// variables
val weightDensity = Val[Double]
val weightCenter = Val[Double]
val weightRoad = Val[Double]
val centerNumber = Val[Int]
val paramMode = Val[String]
//val pCorrDist = Val[Double]
//same cluster number as centers
//val clusters = Val[Int]

// indicators
val networkSpeed = Val[Double]
val localDensity = Val[Double]
val globalDensity = Val[Double]
val moran = Val[Double]

val partitionDistances = Val[Array[Double]]
val nullPartitionDistances = Val[Array[Double]]
val clustersRadius = Val[Array[Double]]
val nullClustersRadius = Val[Array[Double]]
val profileDistTaumax = Val[Array[Double]]
val nullProfileDistTaumax = Val[Array[Double]]
val profileDistEucl = Val[Array[Double]]
val nullProfileDistEucl = Val[Array[Double]]
val clustersWithinss = Val[Array[Double]]
val nullClustersWithinss = Val[Array[Double]]

val id = Val[Int]
val replication = Val[Int]

//  setup-headless [weight-density weight-center weight-road param-mode #-centres final-time clusters random-sd
// indicators : [ eval-speed , eval-density , spatial-autocorrelation-index , global-density]
val cmds = Seq("setup-headless ${weightDensity} ${weightCenter} ${weightRoad} \"${paramMode}\" ${centerNumber} 30 ${centerNumber} ${replication}","run-experiment")

val model =
NetLogo6Task(workDirectory / "HEADLESS_base.nlogo",cmds,embedWorkspace=true) set(
    inputs += (weightDensity,weightCenter,weightRoad,centerNumber,paramMode,replication,id),
    outputs += (weightDensity,weightCenter,weightRoad,centerNumber,paramMode,replication,id),
    outputs += networkSpeed mapped "eval-speed",
    outputs += localDensity mapped "eval-density",
    outputs += globalDensity mapped "global-density",
    //netLogoOutputs += ("spatial-autocorrelation-index", moran),
    outputs += partitionDistances mapped "partition-distances",
    outputs += nullPartitionDistances mapped "null-partition-distances",
    outputs += clustersRadius mapped "clusters-radius",
    outputs += nullClustersRadius mapped "null-clusters-radius",
    outputs += profileDistTaumax mapped "profiledist-taumax",
    outputs += nullProfileDistTaumax mapped "null-profiledist-taumax",
    outputs += profileDistEucl mapped "profiledist-eucl",
    outputs += nullProfileDistEucl mapped "null-profiledist-eucl",
    outputs += clustersWithinss mapped "clusters-withinss",
    outputs += nullClustersWithinss mapped "null-clusters-withinss"
)

val purpose = "TEST"
//val purpose = "GRID"

val env = LocalEnvironment(1)
//val env = EGIEnvironment("vo.complex-systems.eu")

val indics_hook = AppendToCSVFileHook(workDirectory / "exploration" / ((new SimpleDateFormat("yyyyMMdd_HHmm")).format(new Date()))+"_"+purpose+".csv") set (
  arraysOnSingleRow := true
)

val exploration = DirectSampling(
  evaluation = (model on env hook indics_hook),
  //evaluation = (model on env by 2 hook indics_hook),
  /*sampling = ((
    (centerNumber in (3 to 8 by 1)) x
    (
      ((((weightDensity in Seq(0.0,1.0))x(weightCenter in Seq(0.0,1.0))x(weightRoad in Seq(0.0,1.0))) filter ("weightDensity + weightCenter + weightRoad > 0")) x (paramMode is "uniform"))
      :: ((weightDensity is 1.0)x (weightCenter is 1.0) x (weightRoad is 1.0) x (paramMode in Seq("closest-center","linear-gradient")))
    )
    //x (pCorrDist in Seq(1.0,2.0,5.0))
  ) withIndex id)
    x (replication in UniformDistribution[Int]() take 100)*/
  sampling = (((centerNumber is 4) x (paramMode is "closest-center") x (weightDensity is 1.0) x (weightCenter is 1.0) x (weightRoad is 1.0)) withIndex id) x (replication is 0)
)

exploration
