
;;
; correlation network analysis


;;
; construct the correlation network
to correlations:construct-correlation-network
 
  correlations:setup-correlation-nodes

  correlations:setup-correlation-links
  
  
end


;;
; setup nodes
to correlations:setup-correlation-nodes
  ask corr-nodes [die]
  
  ; fixed size -> FIXME as parameter
  ask patches with [pxcor mod corrnw-step = 0 and pycor mod corrnw-step = 0][
    sprout-corr-nodes 1 [
      set size 1 set shape "circle" set color green
      let estimation-set to-list (patches in-radius (2 * corrnw-step))
      set corr-node:lagged-corr-profile (list (lagged-corrs-patches "density" "centre-distance" taumax 5 estimation-set) (lagged-corrs-patches "density" "road-distance" taumax 5 estimation-set) (lagged-corrs-patches "centre-distance" "road-distance" taumax 5 estimation-set))
    ]
  ]
  
  
end


;;
; setup links

to correlations:setup-correlation-links
  ask corr-links [die] 
  
  ask corr-nodes [
    create-corr-links-with other corr-nodes with [not corr-link-neighbor? myself and distance myself < corrnw-step * (sqrt 2 + 0.1)][
      let dist correlations:dist [corr-node:lagged-corr-profile] of end1 [corr-node:lagged-corr-profile] of end2 "taumax"
      set corr-link:weight 1 / ( 1 + dist ^ p-corr-dist)
      ;set corr-link:weight exp (- dist)
      set thickness corr-link:weight
    ] 
  ]
  
  ; thresholding
  ;ask corr-links with [corr-link:weight < 0.1] [die]
end

;;
;
to-report correlations:dist [p1 p2 mode]
  let res 0
  (foreach p1 p2 [
    [p1t p2t] -> 
    
    ifelse mode = "l2" [
      ; l2 dist : too much noise ?
      let d list:minus p1t p2t
      set res res + list:scalar-product d d
    ][
      ; -> use argmax rho_tau
      let i1m list:max-index (map abs (sublist p1t 0 (taumax + 1))) let i1p list:max-index (map abs (sublist p1t taumax (2 * taumax + 1)))
      let i2m list:max-index (map abs (sublist p2t 0 (taumax + 1))) let i2p list:max-index (map abs (sublist p2t taumax (2 * taumax + 1)))
      
      ; -> compare to eucl distance clustering without space ?
    
      
      set res res + ((i1m - i2m) ^ 2) + ((i1p - i2p) ^ 2)
    ]
   ])
  report sqrt res
end


to correlations:communities
  nw:set-context corr-nodes corr-links
  let communities nw:weighted-louvain-communities "corr-link:weight"
  show length communities
  let colors sublist base-colors 0 (length communities) 
  let currentcom 0
  (foreach communities colors [ [community col] ->
    ask community [
      set color col
      set corr-node:community currentcom
      set corr-node:closest-center [who] of one-of centres with-min [distance myself]
    ]
    set currentcom currentcom + 1
  ])
  
end

to-report correlations:partition-distance
  
  let rescom 0 let rescent 0 
  
  ;let communities remove-duplicates [corr-node:community] of corr-nodes
  ;let centers remove-duplicates [corr-node:closest-center] of corr-nodes
  ;let centers remove-duplicates [who] of centres
  
  foreach remove-duplicates [corr-node:community] of corr-nodes [
    community ->
    let current-nodes corr-nodes with [corr-node:community = community]
    ;let p rep 0 (length centers)
    let centers table:make foreach remove-duplicates [corr-node:closest-center] of corr-nodes [? -> table:put centers ? 0]
    ask current-nodes [
      ;set p replace-item (corr-node:closest-center) p ((item corr-node:closest-center p) + (1 / count current-nodes))
      table:put centers corr-node:closest-center ((table:get centers corr-node:closest-center) + (1 / count current-nodes)) 
    ]
    let p table:values centers
    ;show sum p
    set rescom rescom + (1 - list:scalar-product p p)
  ]
  
  foreach remove-duplicates [corr-node:closest-center] of corr-nodes [
    center ->
    let current-nodes corr-nodes with [corr-node:closest-center = center]
    ;let p rep 0 (length communities)
    let communities table:make foreach remove-duplicates [corr-node:community] of corr-nodes [? -> table:put communities ? 0]
    ask current-nodes [
      ;set p replace-item corr-node:community p ((item corr-node:community p) + (1 / count current-nodes))
      table:put communities corr-node:community ((table:get communities corr-node:community) + (1 / count current-nodes))
    ]
    let p table:values communities
    ;show sum p
    set rescent rescent + (1 - list:scalar-product p p)
  ]
  
  report rescom / (length remove-duplicates [corr-node:community] of corr-nodes) + rescent / (length remove-duplicates [corr-node:closest-center] of corr-nodes)
end


;;
;
to-report correlations:bootstrapped-partition-distance
  
  let bootstrap-num 100
  
  let res []
  let resnull []
  
  repeat bootstrap-num [
    correlations:communities
    set res lput correlations:partition-distance res
    
  ]
  
  repeat bootstrap-num [
    ; null model : random com and/or center ? com only, center fixed
    ;let communities remove-duplicates [corr-node:community] of corr-nodes
    ;ask corr-nodes [set corr-node:community first shuffle communities]
    
    ; shuffle weights
    let remainingweights shuffle [corr-link:weight] of corr-links
    ask corr-links [set corr-link:weight first remainingweights set remainingweights but-first remainingweights]
    let avgnull 0 repeat 10 [correlations:communities set avgnull avgnull + correlations:partition-distance]
    set resnull lput (avgnull / 10) resnull
  ]
    
  report (list res resnull)
end


;;
;  FIXME - still not the appropriate distance
to-report correlations:overlap-distance
  ; compute overlap matrix
  let communities remove-duplicates [corr-node:community] of corr-nodes 
  let centers remove-duplicates [corr-node:closest-center] of corr-nodes
  let overlap-matrix matrix:make-constant (length communities) (length centers) 0
  let i 0 let j 0
  repeat length communities [set j 0 repeat length centers [matrix:set overlap-matrix i j (count corr-nodes with [corr-node:community = item i communities and corr-node:closest-center = item j centers]) set j j + 1] set i i + 1]
  let res 0
  (foreach communities (seq 0 (length communities - 1) 1) [
    [community ii] ->
    let comsize count corr-nodes with [corr-node:community = community]
    set res res + (comsize - max (matrix:get-row overlap-matrix ii))
  ])
  (foreach centers (seq 0 (length centers - 1) 1) [
    [center jj] ->
    let comsize count corr-nodes with [corr-node:closest-center = center]
    set res res + (comsize - max (matrix:get-column overlap-matrix jj))
  ])
  report res
end




;;
; kmeans clustering based on correlation profiles
to correlations:profile-clustering
  ask corr-nodes [
    set corr-node:feature concatenate corr-node:lagged-corr-profile
  ]
  ; TODO do not use in bootstrap -
  ;let rs random 1000 show (word "random seed for clustering " rs)
  ;random-seed rs
  let clusters kmeans:cluster-by-feature corr-nodes global:profile-cluster-number 1000 0.01 "corr-node:feature"
  let colors sublist base-colors 0 global:profile-cluster-number
  (foreach clusters colors (seq 1 global:profile-cluster-number 1) [
    [cluster col clustnum] -> ask cluster [
      set corr-node:community clustnum
      set color col 
   ] 
  ])
  ;ask patches [set pcolor [corr-node:closest-center] of one-of corr-nodes with-min [distance myself] * 10 + 5]
  ask patches [set pcolor [corr-node:community] of one-of corr-nodes with-min [distance myself] * 10 + 55]
end


;;
; report clusters following a given reporter
to-report correlations:clusters [reporter]
  let clustnums remove-duplicates ([reporter] of corr-nodes)
  report map [k -> corr-nodes with [reporter = k]] clustnums
end


;;
; clusters is a list of agentsets
to-report correlations:centroids [clusters]
  report map [? -> (list mean ([xcor] of ?) mean ([ycor] of ?))] clusters
end


;;
; heuristic based on nodes similarity
to-report correlations:clustering-nodes-similarity [nbootstrap]
  let n count corr-nodes
  let simmat matrix:make-constant n n 0
  ;let centersimmat matrix:make-constant n n 0 ask corr-nodes [ask corr-nodes [if corr-node:closest-center = [corr-node:closest-center] of myself [
  ;  matrix:set centersimmat corr-node:id [corr-node:id] of myself ((matrix:get centersimmat corr-node:id [corr-node:id] of myself) + 1)
  ;  matrix:set centersimmat [corr-node:id] of myself corr-node:id ((matrix:get centersimmat [corr-node:id] of myself corr-node:id) + 1)
  ;]]]
  let i 0 ask corr-nodes [set corr-node:id i set i i + 1]
  repeat nbootstrap [
    correlations:profile-clustering
    ask corr-nodes [
      ask corr-nodes [
        if corr-node:community = [corr-node:community] of myself [
          matrix:set simmat corr-node:id [corr-node:id] of myself ((matrix:get simmat corr-node:id [corr-node:id] of myself) + 1)
          ;matrix:set simmat [corr-node:id] of myself corr-node:id ((matrix:get simmat [corr-node:id] of myself corr-node:id) + 1)
        ]
      ] 
    ]
  ]
  
  set simmat matrix:times-scalar simmat (1 / nbootstrap)
  
  ; compute l2 matrix dist
  ;let diff matrix:minus simmat centersimmat
  ;report sqrt (sum (map sum matrix:to-row-list (matrix:map [? -> ? * ?] diff)))
  
  ask corr-links [die]
  ask corr-nodes [ask other corr-nodes [let w matrix:get simmat corr-node:id [corr-node:id] of myself create-corr-link-with myself [set corr-link:weight w set thickness corr-link:weight / 5]]]
  report 0
end


;;
; distance between cluster centroids for two clustering reporters
to-report correlations:centroid-distance ;[reporter1 reporter2]
  let n count corr-nodes
  let clustnums1 remove-duplicates [corr-node:community] of corr-nodes let clustnums2 remove-duplicates [corr-node:closest-center] of corr-nodes
  ;let clusters1 correlations:clusters reporter1
  ;let clusters2 correlations:clusters reporter2
  let clusters1 map [k -> corr-nodes with [corr-node:community = k]] clustnums1 
  let clusters2 map [k -> corr-nodes with [corr-node:closest-center = k]] clustnums2
  let centroids1 correlations:centroids clusters1
  let centroids2 correlations:centroids clusters2
  let weights1 map [? -> ? / n] (map count clusters1)
  let weights2 map [? -> ? / n] (map count clusters2)
  
  ;show centroids1 show weights1
  ;show centroids2 show weights2
  
  let dcross 0 (foreach centroids1 weights1 [[c1 w1] -> (foreach centroids2 weights2 [[c2 w2] -> set dcross dcross + (w1 * w2 * sqrt ((first c1 - first c2)^ 2 + (last c1 - last c2)^ 2))])])
  let d1 0 (foreach centroids1 weights1 [[c1 w1] -> (foreach centroids1 weights1 [[c2 w2] -> set d1 d1 + (w1 * w2 * sqrt ((first c1 - first c2)^ 2 + (last c1 - last c2)^ 2))])])
  let d2 0 (foreach centroids2 weights2 [[c1 w1] -> (foreach centroids2 weights2 [[c2 w2] -> set d2 d2 + (w1 * w2 * sqrt ((first c1 - first c2)^ 2 + (last c1 - last c2)^ 2))])])

  ;show dcross show d1 show d2
  
  report 2 * dcross - d1 - d2  
end

;;
; relative spatial radius (average distance to centroid normalized by same measure for the corresponding circle)
to-report correlations:average-clusters-radius
  let clustnums1 remove-duplicates [corr-node:community] of corr-nodes
  let clusters1 map [k -> corr-nodes with [corr-node:community = k]] clustnums1 
  let centroids1 correlations:centroids clusters1
  let reldists []
  (foreach clusters1 centroids1 [
    [cluster centroid] ->
     let x first centroid let y last centroid let n count cluster
     set reldists lput ((mean [sqrt ((xcor - x)^ 2 + (ycor - y)^ 2)] of cluster) / (sqrt n / (2 * pi))) reldists
   ])
  report mean reldists
end


;;
; overlap of the square envelope with
to-report correlations:average-cluster-overlap
  let clustnums remove-duplicates [corr-node:community] of corr-nodes
  let clusters map [k -> corr-nodes with [corr-node:community = k]] clustnums
  let res []
  (foreach clusters clustnums [
    [cluster k] ->
     ; without convex hull primitive we take a square envelope - the effect should be cancelled out on repetitions ? 
     let xmin min [xcor] of cluster let xmax max [xcor] of cluster let ymin min [ycor] of cluster let ymax max [ycor] of cluster
    let nodes-in-envelope corr-nodes with [xcor <= xmax and xcor >= xmin and ycor <= ymax and ycor >= ymin]
    set res lput (count nodes-in-envelope with [corr-node:community != k] / count nodes-in-envelope) res
  ])
  report mean res
end


;;
; average spatial distance between centroids
;  - should be maximized
to-report correlations:average-centroids-distance
  let clustnums remove-duplicates [corr-node:community] of corr-nodes
  let clusters map [k -> corr-nodes with [corr-node:community = k]] clustnums
  let centroids correlations:centroids clusters
  let res []
  foreach centroids [c1 ->
    foreach centroids [c2 ->
      set res lput sqrt ((first c1 - first c2)^ 2 + (last c1 - last c2)^ 2) res
    ]
  ]
  report mean res
end


;;
; average profile distance between corr-node closest to centroids
to-report correlations:average-centroid-profiles-distance
  ;let dist correlations:dist [corr-node:lagged-corr-profile] of end1 [corr-node:lagged-corr-profile] of end2
  let clustnums remove-duplicates [corr-node:community] of corr-nodes
  let clusters map [k -> corr-nodes with [corr-node:community = k]] clustnums
  let centroids correlations:centroids clusters
  let taumaxres []
  let euclres []
  foreach centroids [c1 ->
    let corrnode1 one-of corr-nodes with-min [sqrt ((xcor - first c1)^ 2 + (ycor - last c1)^ 2)]
    foreach centroids [c2 ->
      let corrnode2 one-of corr-nodes with-min [sqrt ((xcor - first c2)^ 2 + (ycor - last c2)^ 2)]
      set taumaxres lput (correlations:dist [corr-node:lagged-corr-profile] of corrnode1 [corr-node:lagged-corr-profile] of corrnode2 "taumax") taumaxres
      set euclres lput (correlations:dist [corr-node:lagged-corr-profile] of corrnode1 [corr-node:lagged-corr-profile] of corrnode2 "l2") euclres
    ] 
  ]
  report (list (mean taumaxres) (mean euclres))
end


;;
; proportion of within cluster sum of squares
;  NOTE : Jung's clusterer does not provide this measure, can not get it out of the netlogo extension
to-report correlations:within-ss
  ; need cluster sizes for ponderation
  let clustnums remove-duplicates [corr-node:community] of corr-nodes
  let clusters map [k -> corr-nodes with [corr-node:community = k]] clustnums
  let clustsizeslist map count clusters let clustsizes table:make (foreach clustnums clustsizeslist [[k s] -> table:put clustsizes k s])
  let n count corr-nodes
  let withinss 0 let totss 0
  ask corr-nodes [
    ask other corr-nodes [
      let d correlations:dist corr-node:lagged-corr-profile [corr-node:lagged-corr-profile] of myself "l2"
      set totss totss + d
      if corr-node:community = [corr-node:community] of myself [let w n / (2 *(table:get clustsizes corr-node:community)) set withinss withinss + w * d]
    ] 
  ]
  report withinss / totss
end


;;
; bootstrap the different measures
;  FIXME if number of measures continues increasing, should be passed as an arg and return a map
to-report correlations:bootstrap-measures [nbootstrap]
  
  let dists [] let nulldists []
  let radiuses [] let nullradiuses []
  let overlaps [] let nulloverlaps []
  let clustdist [] let nullclustdist []
  let profiledisteucl [] let nullprofiledisteucl []
  let profiledisttaumax [] let nullprofiledisttaumax []
  let withinss [] let nullwithinss []
  
  repeat nbootstrap [
    correlations:profile-clustering
    set dists lput correlations:centroid-distance dists
    set radiuses lput correlations:average-clusters-radius radiuses
    set overlaps lput correlations:average-cluster-overlap overlaps
    set clustdist lput correlations:average-centroids-distance clustdist
    let profiledist correlations:average-centroid-profiles-distance set profiledisttaumax lput (first profiledist) profiledisttaumax set profiledisteucl lput (last profiledist) profiledisteucl
    set withinss lput correlations:within-ss withinss
    
    ; shuffle clusters
    let remclusts shuffle [corr-node:community] of corr-nodes
    ask corr-nodes [set corr-node:community first remclusts set remclusts but-first remclusts]
    set nulldists lput correlations:centroid-distance nulldists
    set nullradiuses lput correlations:average-clusters-radius nullradiuses
    set nulloverlaps lput correlations:average-cluster-overlap nulloverlaps
    set nullclustdist lput correlations:average-centroids-distance nullclustdist
    let nullprofiledist correlations:average-centroid-profiles-distance set nullprofiledisttaumax lput (first nullprofiledist) nullprofiledisttaumax set nullprofiledisteucl lput (last nullprofiledist) nullprofiledisteucl
    set nullwithinss lput correlations:within-ss nullwithinss
    
  ]
  
  report (list dists nulldists radiuses nullradiuses overlaps nulloverlaps profiledisttaumax nullprofiledisttaumax profiledisteucl nullprofiledisteucl withinss nullwithinss)
end



to correlations:test-clustering

  let k 4
  ;foreach (seq 2 10 1) [
  ;foreach (seq 4 4 1) [
  ;  k ->
  ;  show k
  
  set global:profile-cluster-number k
    
    ;let res []
    ;repeat 1000 [
      ;correlations:profile-clustering
      ;set res lput correlations:partition-distance res
    ;  set res lput correlations:overlap-distance res
    ;]
    
    ;let dist correlations:clustering-nodes-similarity 100
    ;let dists map [? -> ? * k] correlations:bootstrap-clustering-centroid-distance 1000
    let dists correlations:bootstrap-measures 1000
    
    ;show (word "avg-part-dist = " (min res))
    ;show (word "avg-part-dist = " dist)
    show (word "avg-part-dist = " (mean item 0 dists) " +- " (standard-deviation item 0 dists))
    show (word "null-model = " (mean item 1 dists) " +- " (standard-deviation item 1 dists))
    show (word "avg-radius = " (mean item 2 dists) " +- " (standard-deviation item 2 dists))
    show (word "avg-radius-null = " (mean item 3 dists) " +- " (standard-deviation item 3 dists))
  
  ;]
end







